-- 관계형 데이터베이스의 테이블은 정규화라는 기법을 사용해 설계한다. 정규화로 설계된 테이블 각각은 하나의 독립된 추제를 담는다. 예를 들어 고객 테이블에는 고객 정보만, 주문 테이블에는 주문 정보만
-- 관리한다. 독립된 주체를 가진 테이블은 조인을 사용해 연결할 수 있으면, 조인된 결과는 더 가치 있는 정보를 제공할 수 있다.

-- 조인을 사용하면 안 된다고 주장하는 사람도 있다. 아래와 같은 이유다.
-- * 조인하면 결과가 무조건 맞지 않아. -> 조인을 정확히 사용하면, 설계가 잘못되지 않은 이상 부정확한 결과가 나올 일은 없다. 조인을 다시 익힐 필요가 있다.
-- * 조인하면 성능이 안 좋아. 너무 느려 -> SQL 성능에는 다양한 원인이 있다. 조인 때문에 성능이 나쁘다고 단정하기는 어렵다. 조인을 안 쓰기 시작하면 데이터의 중복이 늘어난다. 이로인해 전체 성능이 나빠질 수 있다.

-- 정규화를 주장하는 것이 아니다. 성능과 개별 편의를 위해, 적절한 반정규화를 필요하다. 다만, 위와 같은 이유로 무작성 조인을 피하려고 해서는 안된다.
-- 조인을 사용해야 테이블 정보가 빛을 발한다. 독립된 정보를 연결해 통합된 정보가 나올 때, 업무적인 가치가 올라간다.


-- 2.1 INNER-JOIN
-- 2.1.1 INNER-JOIN 이해하기

-- 조인에는 세 가지 방법이 있다. INNER-JOIN, OUTER-JOIN, CARTESIAN-JOIN이 그 세 가지다.

-- 보통 조인이라하면 INNER-JOIN을 뜻한다. INNER-JOIN은 조건을 만족하는 데이터만 결합해 결과로 내보낸다.

-- SQL의 WHERE 절에 사용하는 조건은 '필터 조건'과 '조인 조건' 두 가지가 있다. FROM 절에 사용된 테이블이 하나면 필터 조건만 존재한다.
-- 반면에 FROM절에 사용된 테이블이 두 개 이상이면 필터와 조인 조건이 동시에 있을 수 있다.

-- (1) INNER-JOIN의 특징
-- - 조인 조건을 만족하는 데이터만 결합되어 결과에 나올 수 있다.
-- 한 건과 MANY건이 조인되면 MAMY건의 결과가 나온다.

-- 실제 테이블을 이용한 INNER-JOIN SQL을 살펴보자.

SELECT T1.CUS_ID, T1.CUS_GD, T2.ORD_SEQ, T2.CUS_ID, T2.ORD_DT
FROM M_CUS T1
	 , T_ORD T2
WHERE T1.CUS_ID = T2.CUS_ID
AND   T1.CUS_GD = 'A'
AND   T2.ORD_DT >= TO_DATE('20201202', 'YYYYMM')
AND   T2.ORD_DT < TO_DATE('20201111', 'YYYYMM')

-- - 조인 조건(4번 라인) WHERE T1.CUS_ID = T2.CUS_ID
-- - T1 필터 조건(5번 라인) AND   T1.CUS_GD = 'A'
-- - T2 필터 조건(6, 7번 라인) 범위

-- INNER-JOIN의 처리 과정
-- 1. M_CUS에서 CUS_GD가 A인 데이터만 찾아낸다.
-- 2. M_CUS의 첫 번째 로우인 CUS_1과 같은 CUS_ID가 T_ORD에 있는지 검색한다.
-- 필어틔 조건을 만족한 데이터만 